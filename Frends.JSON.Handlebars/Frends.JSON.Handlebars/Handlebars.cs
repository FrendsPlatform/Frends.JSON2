using Frends.JSON.Handlebars.Definitions;
using Newtonsoft.Json.Linq;
using System.ComponentModel;
using System.IO;
using System.Reflection;
using System.Runtime.Loader;
using System.Threading;

namespace Frends.JSON.Handlebars;

/// <summary>
/// JSON Task.
/// </summary>
public class JSON
{
    /// Mem cleanup.
    static JSON()
    {
        var currentAssembly = Assembly.GetExecutingAssembly();
        var currentContext = AssemblyLoadContext.GetLoadContext(currentAssembly);
        if (currentContext != null)
            currentContext.Unloading += OnPluginUnloadingRequested;
    }

    /// <summary>
    /// Compile JToken to Handlebar template string.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.JSON.Handlebars)
    /// </summary>
    /// <param name="input">Input parameters</param>
    /// <param name="cancellationToken">Token generated by frends to stop this Task.</param>
    /// <returns>Object { bool Success, string Data }</returns>
    public static Result Handlebars([PropertyTab] Input input, CancellationToken cancellationToken)
    {
        var template = HandlebarsDotNet.Handlebars.Compile(input.HandlebarTemplate);

        foreach (var partial in input.HandlebarPartials)
        {
            cancellationToken.ThrowIfCancellationRequested();
            using var reader = new StringReader(partial.Template);
            var partialTemplate = HandlebarsDotNet.Handlebars.Compile(reader);
            HandlebarsDotNet.Handlebars.RegisterTemplate(partial.TemplateName, partialTemplate);
        }

        JToken jToken = GetJTokenFromInput(input.Json);
        return new Result(true, template(jToken));
    }

    private static object GetJTokenFromInput(dynamic json)
    {
        if (json is string)
            return JToken.Parse(json);

        if (json is JToken)
            return json;

        throw new InvalidDataException("The input data was not recognized. Supported formats are JSON string and JToken.");
    }

    private static void OnPluginUnloadingRequested(AssemblyLoadContext obj)
    {
        obj.Unloading -= OnPluginUnloadingRequested;
    }
}